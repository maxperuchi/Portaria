@model Portaria.Core.Model.Usuario

@{
    ViewBag.Title = "Registrar";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<html>
<body>
    <section id="content">
        <div class="container">
            <div class="block-header">
                <h2>Cadastro de Usuários</h2>
            </div>
            <div class="card">
                <div class="card-header">
                    <h2>
                        Novo Usuário
                    </h2>
                </div>

                <div class="card-body card-padding">
                    @using (Html.BeginForm())
            {
                        @Html.ValidationSummary(true, "Erro ao criar usuário");

                        <div>
                                <div class="@(ViewData.ModelState["Nome"] != null && ViewData.ModelState["Nome"].Errors.Any() ? "form-group has-error" : "form-group")">
                                    <div class="fg-line">
                                        @Html.TextBoxFor(u => u.Nome, new { @class = "form-control input-sm", Placeholder = "Nome" })
                                        <small class="help-block">@Html.ValidationMessageFor(u => u.Nome)</small>
                                    </div>
                                </div>

                            <div class="@(ViewData.ModelState["RG"] != null && ViewData.ModelState["RG"].Errors.Any() ? "form-group has-error" : "form-group")">
                                <div class="fg-line">
                                    @Html.TextBoxFor(u => u.RG, new { @class = "form-control input-sm", Placeholder = "RG" })
                                </div>
                                <small class="help-block">@Html.ValidationMessageFor(u => u.RG)</small>
                            </div>

                            <div class="@(ViewData.ModelState["CPF"] != null && ViewData.ModelState["CPF"].Errors.Any() ? "form-group has-error" : "form-group")">
                                <div class="fg-line">
                                    @Html.TextBoxFor(u => u.CPF, new { @class = "form-control input-sm", Placeholder = "CPF" })
                                </div>
                                <small class="help-block">@Html.ValidationMessageFor(u => u.CPF)</small>
                            </div>

                                <div class="select">
                                    @Html.DropDownListFor(u => u.Tipo, new SelectList(Enum.GetValues(typeof(Portaria.Core.TipoUsuario))), new { @class = "form-control" })
                                </div>

                            <div class="@(ViewData.ModelState["Login"] != null && ViewData.ModelState["Login"].Errors.Any() ? "form-group has-error" : "form-group")">
                                <div class="fg-line">
                                    @Html.TextBoxFor(u => u.Login, new { @class = "form-control input-sm", Placeholder = "Login" })
                                </div>
                                <small class="help-block">@Html.ValidationMessageFor(u => u.Login)</small>
                            </div>

                            <div class="@(ViewData.ModelState["Senha"] != null && ViewData.ModelState["Senha"].Errors.Any() ? "form-group has-error" : "form-group")">
                                <div class="fg-line">
                                    @Html.PasswordFor(u => u.Senha, new { @class = "form-control input-sm", Placeholder = "Senha" })
                                </div>
                                <small class="help-block">@Html.ValidationMessageFor(u => u.Senha)</small>
                            </div>

                                <div>
                                    <br />
                                    <button class="btn btn-primary btn-sm waves-effect" type="submit">Criar</button>
                                </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </section>
</body>
</html>